// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TcDbConnector;

#nullable disable

namespace TcDbConnector.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250826104047_RenameDiagramShagFields")]
    partial class RenameDiagramShagFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AuthorTechnologicalCard", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalCardsId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "TechnologicalCardsId");

                    b.HasIndex("TechnologicalCardsId");

                    b.ToTable("AuthorTechnologicalCard");
                });

            modelBuilder.Entity("AuthorTechnologicalProcess", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessesId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "TechnologicalProcessesId");

                    b.HasIndex("TechnologicalProcessesId");

                    b.ToTable("AuthorTechnologicalProcess");
                });

            modelBuilder.Entity("DiagramShagImageOwner", b =>
                {
                    b.Property<int>("DiagramShagsId")
                        .HasColumnType("int");

                    b.Property<long>("ImageListId")
                        .HasColumnType("bigint");

                    b.HasKey("DiagramShagsId", "ImageListId");

                    b.HasIndex("ImageListId");

                    b.ToTable("DiagramShagImageOwner");
                });

            modelBuilder.Entity("ExecutionWorkImageOwner", b =>
                {
                    b.Property<int>("ExecutionWorksId")
                        .HasColumnType("int");

                    b.Property<long>("ImageListId")
                        .HasColumnType("bigint");

                    b.HasKey("ExecutionWorksId", "ImageListId");

                    b.HasIndex("ImageListId");

                    b.ToTable("ExecutionWorkImageOwner");
                });

            modelBuilder.Entity("ExecutionWorkMachine_TC", b =>
                {
                    b.Property<int>("ExecutionWorksId")
                        .HasColumnType("int");

                    b.Property<int>("MachinesParentId")
                        .HasColumnType("int");

                    b.Property<int>("MachinesChildId")
                        .HasColumnType("int");

                    b.HasKey("ExecutionWorksId", "MachinesParentId", "MachinesChildId");

                    b.HasIndex("MachinesParentId", "MachinesChildId");

                    b.ToTable("ExecutionWorkMachine_TC");
                });

            modelBuilder.Entity("ExecutionWorkProtection_TC", b =>
                {
                    b.Property<int>("ExecutionWorksId")
                        .HasColumnType("int");

                    b.Property<int>("ProtectionsParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProtectionsChildId")
                        .HasColumnType("int");

                    b.HasKey("ExecutionWorksId", "ProtectionsParentId", "ProtectionsChildId");

                    b.HasIndex("ProtectionsParentId", "ProtectionsChildId");

                    b.ToTable("ExecutionWorkProtection_TC");
                });

            modelBuilder.Entity("ExecutionWorkStaff_TC", b =>
                {
                    b.Property<int>("ExecutionWorksId")
                        .HasColumnType("int");

                    b.Property<int>("StaffsIdAuto")
                        .HasColumnType("int");

                    b.HasKey("ExecutionWorksId", "StaffsIdAuto");

                    b.HasIndex("StaffsIdAuto");

                    b.ToTable("ExecutionWorkStaff_TC");
                });

            modelBuilder.Entity("TcModels.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("TcModels.Models.ImageOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ImageStorageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageStorageId");

                    b.HasIndex("TechnologicalCardId");

                    b.ToTable("ImageOwners");
                });

            modelBuilder.Entity("TcModels.Models.ImageStorage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageBase64")
                        .HasColumnType("longtext");

                    b.Property<string>("MimeType")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("StorageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ImageStorage");
                });

            modelBuilder.Entity("TcModels.Models.InnerDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("InnerDirectory");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Component_TC", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Component_TC", (string)null);
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Instrument_kit<TcModels.Models.TcContent.Component>", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Instrument_kit<Component>");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.LinkEntety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProtectionId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProtectionId");

                    b.HasIndex("ToolId");

                    b.ToTable("LinkEntety");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Machine_TC", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsInOutlay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Machine_TC", (string)null);
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Protection_TC", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Protection_TC", (string)null);
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.StaffRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RelatedStaffId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelatedStaffId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffRelationship");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Staff_TC", b =>
                {
                    b.Property<int>("IdAuto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdAuto"));

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<bool>("IsInOutlay")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("-");

                    b.HasKey("IdAuto");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("Staff_TC", (string)null);
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Tool_TC", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Formula")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Tool_TC", (string)null);
                });

            modelBuilder.Entity("TcModels.Models.ObjectLocker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("BlockedConcurrencyObjects");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Coefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TechnologicalCardId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TechnologicalCardId");

                    b.HasIndex("Code", "TechnologicalCardId")
                        .IsUnique();

                    b.ToTable("Coefficients");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClassifierCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ComponentWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRemarkClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.Property<int>("componentId")
                        .HasColumnType("int");

                    b.Property<int>("techOperationWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("componentId");

                    b.HasIndex("techOperationWorkId");

                    b.ToTable("ComponentWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagamToWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ParallelIndex")
                        .HasColumnType("longtext");

                    b.Property<int>("techOperationWorkId")
                        .HasColumnType("int");

                    b.Property<int>("technologicalCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("techOperationWorkId");

                    b.HasIndex("technologicalCardId");

                    b.ToTable("DiagamToWork");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramParalelno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagamToWorkId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("techOperationWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagamToWorkId");

                    b.HasIndex("techOperationWorkId");

                    b.ToTable("DiagramParalelno");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramPosledov", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagramParalelnoId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagramParalelnoId");

                    b.ToTable("DiagramPosledov");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramShag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DiagramPosledovId")
                        .HasColumnType("int");

                    b.Property<string>("ImageBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRemarkClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DiagramPosledovId");

                    b.ToTable("DiagramShag");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramShagToolsComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<int>("DiagramShagId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int?>("componentWorkId")
                        .HasColumnType("int");

                    b.Property<int?>("toolWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagramShagId");

                    b.HasIndex("componentWorkId");

                    b.HasIndex("toolWorkId");

                    b.ToTable("DiagramShagToolsComponent");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ExecutionWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coefficient")
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Etap")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRemarkClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PictureName")
                        .HasColumnType("longtext");

                    b.Property<string>("Posled")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Repeat")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("RepeatsTCId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RowOrder")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<Guid?>("maxEw")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("sumEw")
                        .HasColumnType("char(36)");

                    b.Property<int>("techOperationWorkId")
                        .HasColumnType("int");

                    b.Property<int?>("techTransitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("techOperationWorkId");

                    b.HasIndex("techTransitionId");

                    b.ToTable("ExecutionWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ExecutionWorkRepeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildExecutionWorkId")
                        .HasColumnType("int");

                    b.Property<string>("NewCoefficient")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewEtap")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewPosled")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ParentExecutionWorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildExecutionWorkId");

                    b.HasIndex("ParentExecutionWorkId");

                    b.ToTable("ExecutionWorkRepeats");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassifierCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Outlay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("OutlayUnitType")
                        .HasColumnType("int");

                    b.Property<double>("OutlayValue")
                        .HasColumnType("double");

                    b.Property<int>("TcId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OutlaysTable");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Protection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassifierCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Protections");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.RoadMap.RoadMapItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.Property<string>("SequenceData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Staffs")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TOName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoadMapItems");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassifierCode")
                        .HasColumnType("longtext");

                    b.Property<string>("CombineResponsibility")
                        .HasColumnType("longtext");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<string>("Functions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OriginalId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TechOperations");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechOperationWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Component_TCChildId")
                        .HasColumnType("int");

                    b.Property<int?>("Component_TCParentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("ParallelIndex")
                        .HasColumnType("longtext")
                        .HasColumnName("ParallelIndex");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.Property<int>("TechnologicalCardId")
                        .HasColumnType("int");

                    b.Property<int?>("Tool_TCChildId")
                        .HasColumnType("int");

                    b.Property<int?>("Tool_TCParentId")
                        .HasColumnType("int");

                    b.Property<int>("techOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechnologicalCardId");

                    b.HasIndex("techOperationId");

                    b.HasIndex("Component_TCParentId", "Component_TCChildId");

                    b.HasIndex("Tool_TCParentId", "Tool_TCChildId");

                    b.ToTable("TechOperationWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("CommentName")
                        .HasColumnType("longtext");

                    b.Property<string>("CommentTimeExecution")
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TimeExecution")
                        .HasColumnType("double");

                    b.Property<bool?>("TimeExecutionChecked")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("TechTransitions");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClassifierCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedTCId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ToolWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRemarkClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("Reply")
                        .HasColumnType("longtext");

                    b.Property<int>("techOperationWorkId")
                        .HasColumnType("int");

                    b.Property<int>("toolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("techOperationWorkId");

                    b.HasIndex("toolId");

                    b.ToTable("ToolWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Work.TechTransitionTypical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coefficient")
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Etap")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Posled")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TechOperationId")
                        .HasColumnType("int");

                    b.Property<int>("TechTransitionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechOperationId");

                    b.HasIndex("TechTransitionId");

                    b.ToTable("TechTransitionTypicals");
                });

            modelBuilder.Entity("TcModels.Models.TechnologicalCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Applicability")
                        .HasColumnType("longtext");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ClassifierCode")
                        .HasColumnType("longtext");

                    b.Property<string>("DamageType")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long?>("ExecutionSchemeImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("FinalProduct")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDynamic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NetworkVoltage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("OutlayUnit")
                        .HasColumnType("int");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext");

                    b.Property<string>("RepairType")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TechnologicalProcessName")
                        .HasColumnType("longtext");

                    b.Property<string>("TechnologicalProcessNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("TechnologicalProcessType")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionSchemeImageId");

                    b.ToTable("TechnologicalCards");
                });

            modelBuilder.Entity("TcModels.Models.TechnologicalProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TechnologicalProcesses");
                });

            modelBuilder.Entity("TechnologicalCardTechnologicalProcess", b =>
                {
                    b.Property<int>("TechnologicalCardsId")
                        .HasColumnType("int");

                    b.Property<int>("TechnologicalProcessId")
                        .HasColumnType("int");

                    b.HasKey("TechnologicalCardsId", "TechnologicalProcessId");

                    b.HasIndex("TechnologicalProcessId");

                    b.ToTable("TechnologicalCardTechnologicalProcess");
                });

            modelBuilder.Entity("AuthorTechnologicalCard", b =>
                {
                    b.HasOne("TcModels.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", null)
                        .WithMany()
                        .HasForeignKey("TechnologicalCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorTechnologicalProcess", b =>
                {
                    b.HasOne("TcModels.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalProcess", null)
                        .WithMany()
                        .HasForeignKey("TechnologicalProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagramShagImageOwner", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.DiagramShag", null)
                        .WithMany()
                        .HasForeignKey("DiagramShagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.ImageOwner", null)
                        .WithMany()
                        .HasForeignKey("ImageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExecutionWorkImageOwner", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", null)
                        .WithMany()
                        .HasForeignKey("ExecutionWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.ImageOwner", null)
                        .WithMany()
                        .HasForeignKey("ImageListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExecutionWorkMachine_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", null)
                        .WithMany()
                        .HasForeignKey("ExecutionWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.IntermediateTables.Machine_TC", null)
                        .WithMany()
                        .HasForeignKey("MachinesParentId", "MachinesChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExecutionWorkProtection_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", null)
                        .WithMany()
                        .HasForeignKey("ExecutionWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.IntermediateTables.Protection_TC", null)
                        .WithMany()
                        .HasForeignKey("ProtectionsParentId", "ProtectionsChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExecutionWorkStaff_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", null)
                        .WithMany()
                        .HasForeignKey("ExecutionWorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.IntermediateTables.Staff_TC", null)
                        .WithMany()
                        .HasForeignKey("StaffsIdAuto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TcModels.Models.ImageOwner", b =>
                {
                    b.HasOne("TcModels.Models.ImageStorage", "ImageStorage")
                        .WithMany()
                        .HasForeignKey("ImageStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "TechnologicalCard")
                        .WithMany("ImageList")
                        .HasForeignKey("TechnologicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageStorage");

                    b.Navigation("TechnologicalCard");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Component_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Component", "Child")
                        .WithMany("Component_TCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "Parent")
                        .WithMany("Component_TCs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Instrument_kit<TcModels.Models.TcContent.Component>", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Component", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.Component", "Parent")
                        .WithMany("Kit")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.LinkEntety", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Component", null)
                        .WithMany("Links")
                        .HasForeignKey("ComponentId");

                    b.HasOne("TcModels.Models.TcContent.Machine", null)
                        .WithMany("Links")
                        .HasForeignKey("MachineId");

                    b.HasOne("TcModels.Models.TcContent.Protection", null)
                        .WithMany("Links")
                        .HasForeignKey("ProtectionId");

                    b.HasOne("TcModels.Models.TcContent.Tool", null)
                        .WithMany("Links")
                        .HasForeignKey("ToolId");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Machine_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Machine", "Child")
                        .WithMany("Machine_TCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "Parent")
                        .WithMany("Machine_TCs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Protection_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Protection", "Child")
                        .WithMany("Protection_TCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "Parent")
                        .WithMany("Protection_TCs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.StaffRelationship", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Staff", "RelatedStaff")
                        .WithMany()
                        .HasForeignKey("RelatedStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedStaff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Staff_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Staff", "Child")
                        .WithMany("Staff_TCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "Parent")
                        .WithMany("Staff_TCs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Tool_TC", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Tool", "Child")
                        .WithMany("Tool_TCs")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "Parent")
                        .WithMany("Tool_TCs")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Coefficient", b =>
                {
                    b.HasOne("TcModels.Models.TechnologicalCard", "TechnologicalCard")
                        .WithMany("Coefficients")
                        .HasForeignKey("TechnologicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnologicalCard");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ComponentWork", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.Component", "component")
                        .WithMany()
                        .HasForeignKey("componentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.TechOperationWork", "techOperationWork")
                        .WithMany("ComponentWorks")
                        .HasForeignKey("techOperationWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("component");

                    b.Navigation("techOperationWork");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagamToWork", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.TechOperationWork", "techOperationWork")
                        .WithMany()
                        .HasForeignKey("techOperationWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalCard", "technologicalCard")
                        .WithMany("DiagamToWork")
                        .HasForeignKey("technologicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("techOperationWork");

                    b.Navigation("technologicalCard");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramParalelno", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.DiagamToWork", "DiagamToWork")
                        .WithMany("ListDiagramParalelno")
                        .HasForeignKey("DiagamToWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.TechOperationWork", "techOperationWork")
                        .WithMany("ListDiagramParalelno")
                        .HasForeignKey("techOperationWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagamToWork");

                    b.Navigation("techOperationWork");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramPosledov", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.DiagramParalelno", "DiagramParalelno")
                        .WithMany("ListDiagramPosledov")
                        .HasForeignKey("DiagramParalelnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagramParalelno");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramShag", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.DiagramPosledov", "DiagramPosledov")
                        .WithMany("ListDiagramShag")
                        .HasForeignKey("DiagramPosledovId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagramPosledov");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramShagToolsComponent", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.DiagramShag", "DiagramShag")
                        .WithMany("ListDiagramShagToolsComponent")
                        .HasForeignKey("DiagramShagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.ComponentWork", "componentWork")
                        .WithMany()
                        .HasForeignKey("componentWorkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TcModels.Models.TcContent.ToolWork", "toolWork")
                        .WithMany()
                        .HasForeignKey("toolWorkId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DiagramShag");

                    b.Navigation("componentWork");

                    b.Navigation("toolWork");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ExecutionWork", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.TechOperationWork", "techOperationWork")
                        .WithMany("executionWorks")
                        .HasForeignKey("techOperationWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.TechTransition", "techTransition")
                        .WithMany("ExecutionWorks")
                        .HasForeignKey("techTransitionId");

                    b.Navigation("techOperationWork");

                    b.Navigation("techTransition");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ExecutionWorkRepeat", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", "ChildExecutionWork")
                        .WithMany()
                        .HasForeignKey("ChildExecutionWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.ExecutionWork", "ParentExecutionWork")
                        .WithMany("ExecutionWorkRepeats")
                        .HasForeignKey("ParentExecutionWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildExecutionWork");

                    b.Navigation("ParentExecutionWork");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechOperationWork", b =>
                {
                    b.HasOne("TcModels.Models.TechnologicalCard", "technologicalCard")
                        .WithMany("TechOperationWorks")
                        .HasForeignKey("TechnologicalCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.TechOperation", "techOperation")
                        .WithMany("techOperationWorks")
                        .HasForeignKey("techOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.IntermediateTables.Component_TC", null)
                        .WithMany("TechOperationWorks")
                        .HasForeignKey("Component_TCParentId", "Component_TCChildId");

                    b.HasOne("TcModels.Models.IntermediateTables.Tool_TC", null)
                        .WithMany("TechOperationWorks")
                        .HasForeignKey("Tool_TCParentId", "Tool_TCChildId");

                    b.Navigation("techOperation");

                    b.Navigation("technologicalCard");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ToolWork", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.TechOperationWork", "techOperationWork")
                        .WithMany("ToolWorks")
                        .HasForeignKey("techOperationWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.Tool", "tool")
                        .WithMany()
                        .HasForeignKey("toolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("techOperationWork");

                    b.Navigation("tool");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Work.TechTransitionTypical", b =>
                {
                    b.HasOne("TcModels.Models.TcContent.TechOperation", "TechOperation")
                        .WithMany("techTransitionTypicals")
                        .HasForeignKey("TechOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TcContent.TechTransition", "TechTransition")
                        .WithMany("techTransitionTypicals")
                        .HasForeignKey("TechTransitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechOperation");

                    b.Navigation("TechTransition");
                });

            modelBuilder.Entity("TcModels.Models.TechnologicalCard", b =>
                {
                    b.HasOne("TcModels.Models.ImageStorage", "ExecutionSchemeImage")
                        .WithMany()
                        .HasForeignKey("ExecutionSchemeImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ExecutionSchemeImage");
                });

            modelBuilder.Entity("TechnologicalCardTechnologicalProcess", b =>
                {
                    b.HasOne("TcModels.Models.TechnologicalCard", null)
                        .WithMany()
                        .HasForeignKey("TechnologicalCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TcModels.Models.TechnologicalProcess", null)
                        .WithMany()
                        .HasForeignKey("TechnologicalProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Component_TC", b =>
                {
                    b.Navigation("TechOperationWorks");
                });

            modelBuilder.Entity("TcModels.Models.IntermediateTables.Tool_TC", b =>
                {
                    b.Navigation("TechOperationWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Component", b =>
                {
                    b.Navigation("Component_TCs");

                    b.Navigation("Kit");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagamToWork", b =>
                {
                    b.Navigation("ListDiagramParalelno");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramParalelno", b =>
                {
                    b.Navigation("ListDiagramPosledov");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramPosledov", b =>
                {
                    b.Navigation("ListDiagramShag");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.DiagramShag", b =>
                {
                    b.Navigation("ListDiagramShagToolsComponent");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.ExecutionWork", b =>
                {
                    b.Navigation("ExecutionWorkRepeats");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Machine", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Machine_TCs");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Protection", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Protection_TCs");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Staff", b =>
                {
                    b.Navigation("Staff_TCs");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechOperation", b =>
                {
                    b.Navigation("techOperationWorks");

                    b.Navigation("techTransitionTypicals");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechOperationWork", b =>
                {
                    b.Navigation("ComponentWorks");

                    b.Navigation("ListDiagramParalelno");

                    b.Navigation("ToolWorks");

                    b.Navigation("executionWorks");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.TechTransition", b =>
                {
                    b.Navigation("ExecutionWorks");

                    b.Navigation("techTransitionTypicals");
                });

            modelBuilder.Entity("TcModels.Models.TcContent.Tool", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Tool_TCs");
                });

            modelBuilder.Entity("TcModels.Models.TechnologicalCard", b =>
                {
                    b.Navigation("Coefficients");

                    b.Navigation("Component_TCs");

                    b.Navigation("DiagamToWork");

                    b.Navigation("ImageList");

                    b.Navigation("Machine_TCs");

                    b.Navigation("Protection_TCs");

                    b.Navigation("Staff_TCs");

                    b.Navigation("TechOperationWorks");

                    b.Navigation("Tool_TCs");
                });
#pragma warning restore 612, 618
        }
    }
}
